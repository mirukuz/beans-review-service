type Bean {
  id: String
  name: String
  origin: String
  produceAt: DateTime
  review: [Review!]
  roaster: Roaster
  website: String
}

input BeanCreateInput {
  content: String
  title: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Mutation {
  deleteBean(id: String!): Bean
  deleteReview(id: String!): Review
  deleteRoaster(id: String!): Roaster
}

type Query {
  allBeans(searchString: String, skip: Int, take: Int): [Bean!]
  allRoasters(searchString: String, skip: Int, take: Int): [Roaster!]
  allUsers: [User!]
  beanById(id: String!): Bean
  feed(orderBy: ReviewOrderByUpdatedAtInput, searchString: String, skip: Int, take: Int): [Review!]
  reviewById(id: String!): Review
  roasterById(id: String!): Roaster
}

type Review {
  author: User
  content: String
  createdAt: DateTime
  id: String
  published: Boolean
  updatedAt: DateTime
}

input ReviewCreateInput {
  content: String
  title: String!
}

input ReviewOrderByUpdatedAtInput {
  updatedAt: SortOrder!
}

type Roaster {
  address: String
  bean: [Bean!]
  country: String
  id: String
  name: String
  website: String
}

input RoasterCreateInput {
  content: String
  title: String!
}

enum SortOrder {
  asc
  desc
}

enum TastingNote {
  Baking
  Cocoa
  Floral
  Fruity
  Green
  Other
  Sour
  Spice
  Sweetness
}

type User {
  email: String
  id: String
  name: String
  reviews: [Review!]
}

input UserCreateInput {
  email: String!
  name: String
  reviews: [ReviewCreateInput!]
}

input UserUniqueInput {
  email: String
  id: Int
}